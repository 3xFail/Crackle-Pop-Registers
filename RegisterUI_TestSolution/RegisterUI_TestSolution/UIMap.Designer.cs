// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace RegisterUI_TestSolution
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Adds a single test item plain to the transaction. This item has no coupons or sales.
        /// </summary>
        public void Add_Item_Plain()
        {
            #region Variable Declarations
            WpfEdit uIUPCFieldEdit = this.UIMainWindowWindow.UIUPCFieldEdit;
            #endregion

            // Type 'TestItem1' in 'UPCField' text box
            uIUPCFieldEdit.Text = this.Add_Item_PlainParams.UIUPCFieldEditText;

            // Type '{Enter}' in 'UPCField' text box
            Keyboard.SendKeys(uIUPCFieldEdit, this.Add_Item_PlainParams.UIUPCFieldEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Login to the system.
        /// </summary>
        public void Login()
        {
            #region Variable Declarations
            WpfEdit uIUsernameFieldEdit = this.UIMainWindowWindow.UIUsernameFieldEdit;
            WpfEdit uIPasswordFieldEdit = this.UIMainWindowWindow.UIPasswordFieldEdit;
            WpfButton uILogInButton = this.UIMainWindowWindow.UILogInButton;
            #endregion

            // Launch 'D:\Documents\AAA School Work AAA\AAA Current Term AAA\JP\Crackle-Pop\Snap Register System Interface\Snap Register System Interface\bin\Release\Snap Register System Interface.exe'
            ApplicationUnderTest uIMainWindowWindow = ApplicationUnderTest.Launch(this.LoginParams.UIMainWindowWindowExePath, this.LoginParams.UIMainWindowWindowAlternateExePath);

            // Type 'ss' in 'usernameField' text box
            uIUsernameFieldEdit.Text = this.LoginParams.UIUsernameFieldEditText;

            // Type '{Tab}' in 'usernameField' text box
            Keyboard.SendKeys(uIUsernameFieldEdit, this.LoginParams.UIUsernameFieldEditSendKeys, ModifierKeys.None);

            // Type '********' in 'passwordField' text box
            Keyboard.SendKeys(uIPasswordFieldEdit, this.LoginParams.UIPasswordFieldEditSendKeys, true);

            // Click 'Log In' button
            Mouse.Click(uILogInButton, new Point(25, 13));
        }
        
        /// <summary>
        /// Logout of the system.
        /// </summary>
        public void Logout()
        {
            #region Variable Declarations
            WpfButton uIOptionsButtonButton = this.UIMainWindowWindow.UIOptionsButtonButton;
            WpfButton uILogoutButton = this.UIMainWindowWindow.UIMain_FramePane.UILogoutButton;
            #endregion

            // Click 'OptionsButton' button
            Mouse.Click(uIOptionsButtonButton, new Point(163, 423));

            // Click 'Logout' button
            Mouse.Click(uILogoutButton, new Point(159, 34));
        }
        
        /// <summary>
        /// Checks the values for a transaction that only has a single item in it. That item has no coupons or sales.
        /// </summary>
        public void Assert_Single_Plain_Item()
        {
            #region Variable Declarations
            WpfText uITestItemPlainText = this.UIMainWindowWindow.UIItemScrollPane.UITestItemPlainText;
            WpfText uIItem1000Text = this.UIMainWindowWindow.UIItemScrollPane.UIItem1000Text;
            WpfText uIItem1000Text1 = this.UIMainWindowWindow.UIItem1000Text;
            WpfText uIItem000Text = this.UIMainWindowWindow.UIItem000Text;
            WpfText uIItem1000Text11 = this.UIMainWindowWindow.UIItem1000Text1;
            #endregion

            // Verify that the 'DisplayText' property of 'Test Item: Plain' label equals 'Test Item: Plain'
            Assert.AreEqual(this.Assert_Single_Plain_ItemExpectedValues.UITestItemPlainTextDisplayText, uITestItemPlainText.DisplayText);

            // Verify that the 'DisplayText' property of '$10.00' label equals '$10.00'
            Assert.AreEqual(this.Assert_Single_Plain_ItemExpectedValues.UIItem1000TextDisplayText, uIItem1000Text.DisplayText);

            // Verify that the 'DisplayText' property of '$10.00' label equals '$10.00'
            Assert.AreEqual(this.Assert_Single_Plain_ItemExpectedValues.UIItem1000TextDisplayText1, uIItem1000Text1.DisplayText);

            // Verify that the 'DisplayText' property of '$0.00' label equals '$0.00'
            Assert.AreEqual(this.Assert_Single_Plain_ItemExpectedValues.UIItem000TextDisplayText, uIItem000Text.DisplayText);

            // Verify that the 'DisplayText' property of '$10.00' label equals '$10.00'
            Assert.AreEqual(this.Assert_Single_Plain_ItemExpectedValues.UIItem1000Text1DisplayText, uIItem1000Text11.DisplayText);
        }
        
        /// <summary>
        /// Checks the amounts for 3 plain items added to a transaction.
        /// </summary>
        public void Assert_Multiple_Plain_Items()
        {
            #region Variable Declarations
            WpfText uITestItemPlainText = this.UIMainWindowWindow.UIItemScrollPane.UITestItemPlainText;
            WpfText uIItem1000Text = this.UIMainWindowWindow.UIItemScrollPane.UIItem1000Text;
            WpfText uIItem1000Text1 = this.UIMainWindowWindow.UIItem1000Text;
            WpfText uIItem000Text = this.UIMainWindowWindow.UIItem000Text;
            WpfText uIItem1000Text11 = this.UIMainWindowWindow.UIItem1000Text1;
            #endregion

            // Verify that the 'DisplayText' property of 'Test Item: Plain' label equals 'Test Item: Plain'
            Assert.AreEqual(this.Assert_Multiple_Plain_ItemsExpectedValues.UITestItemPlainTextDisplayText, uITestItemPlainText.DisplayText);

            // Verify that the 'DisplayText' property of '$10.00' label equals '$10.00'
            Assert.AreEqual(this.Assert_Multiple_Plain_ItemsExpectedValues.UIItem1000TextDisplayText, uIItem1000Text.DisplayText);

            // Verify that the 'DisplayText' property of 'Test Item: Plain' label equals 'Test Item: Plain'
            Assert.AreEqual(this.Assert_Multiple_Plain_ItemsExpectedValues.UITestItemPlainTextDisplayText1, uITestItemPlainText.DisplayText);

            // Verify that the 'DisplayText' property of '$10.00' label equals '$10.00'
            Assert.AreEqual(this.Assert_Multiple_Plain_ItemsExpectedValues.UIItem1000TextDisplayText1, uIItem1000Text.DisplayText);

            // Verify that the 'DisplayText' property of 'Test Item: Plain' label equals 'Test Item: Plain'
            Assert.AreEqual(this.Assert_Multiple_Plain_ItemsExpectedValues.UITestItemPlainTextDisplayText2, uITestItemPlainText.DisplayText);

            // Verify that the 'DisplayText' property of '$10.00' label equals '$10.00'
            Assert.AreEqual(this.Assert_Multiple_Plain_ItemsExpectedValues.UIItem1000TextDisplayText2, uIItem1000Text.DisplayText);

            // Verify that the 'DisplayText' property of '$10.00' label equals '$30.00'
            Assert.AreEqual(this.Assert_Multiple_Plain_ItemsExpectedValues.UIItem1000TextDisplayText3, uIItem1000Text1.DisplayText);

            // Verify that the 'DisplayText' property of '$0.00' label equals '$0.00'
            Assert.AreEqual(this.Assert_Multiple_Plain_ItemsExpectedValues.UIItem000TextDisplayText, uIItem000Text.DisplayText);

            // Verify that the 'DisplayText' property of '$10.00' label equals '$30.00'
            Assert.AreEqual(this.Assert_Multiple_Plain_ItemsExpectedValues.UIItem1000Text1DisplayText, uIItem1000Text11.DisplayText);
        }
        
        #region Properties
        public virtual Add_Item_PlainParams Add_Item_PlainParams
        {
            get
            {
                if ((this.mAdd_Item_PlainParams == null))
                {
                    this.mAdd_Item_PlainParams = new Add_Item_PlainParams();
                }
                return this.mAdd_Item_PlainParams;
            }
        }
        
        public virtual LoginParams LoginParams
        {
            get
            {
                if ((this.mLoginParams == null))
                {
                    this.mLoginParams = new LoginParams();
                }
                return this.mLoginParams;
            }
        }
        
        public virtual Assert_Single_Plain_ItemExpectedValues Assert_Single_Plain_ItemExpectedValues
        {
            get
            {
                if ((this.mAssert_Single_Plain_ItemExpectedValues == null))
                {
                    this.mAssert_Single_Plain_ItemExpectedValues = new Assert_Single_Plain_ItemExpectedValues();
                }
                return this.mAssert_Single_Plain_ItemExpectedValues;
            }
        }
        
        public virtual Assert_Multiple_Plain_ItemsExpectedValues Assert_Multiple_Plain_ItemsExpectedValues
        {
            get
            {
                if ((this.mAssert_Multiple_Plain_ItemsExpectedValues == null))
                {
                    this.mAssert_Multiple_Plain_ItemsExpectedValues = new Assert_Multiple_Plain_ItemsExpectedValues();
                }
                return this.mAssert_Multiple_Plain_ItemsExpectedValues;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        #endregion
        
        #region Fields
        private Add_Item_PlainParams mAdd_Item_PlainParams;
        
        private LoginParams mLoginParams;
        
        private Assert_Single_Plain_ItemExpectedValues mAssert_Single_Plain_ItemExpectedValues;
        
        private Assert_Multiple_Plain_ItemsExpectedValues mAssert_Multiple_Plain_ItemsExpectedValues;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Add_Item_Plain'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Add_Item_PlainParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'TestItem1' in 'UPCField' text box
        /// </summary>
        public string UIUPCFieldEditText = "TestItem1";
        
        /// <summary>
        /// Type '{Enter}' in 'UPCField' text box
        /// </summary>
        public string UIUPCFieldEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Login'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LoginParams
    {
        
        #region Fields
        /// <summary>
        /// Launch 'D:\Documents\AAA School Work AAA\AAA Current Term AAA\JP\Crackle-Pop\Snap Register System Interface\Snap Register System Interface\bin\Release\Snap Register System Interface.exe'
        /// </summary>
        public string UIMainWindowWindowExePath = "D:\\Documents\\AAA School Work AAA\\AAA Current Term AAA\\JP\\Crackle-Pop\\Snap Registe" +
            "r System Interface\\Snap Register System Interface\\bin\\Release\\Snap Register Syst" +
            "em Interface.exe";
        
        /// <summary>
        /// Launch 'D:\Documents\AAA School Work AAA\AAA Current Term AAA\JP\Crackle-Pop\Snap Register System Interface\Snap Register System Interface\bin\Release\Snap Register System Interface.exe'
        /// </summary>
        public string UIMainWindowWindowAlternateExePath = "D:\\Documents\\AAA School Work AAA\\AAA Current Term AAA\\JP\\Crackle-Pop\\Snap Registe" +
            "r System Interface\\Snap Register System Interface\\bin\\Release\\Snap Register Syst" +
            "em Interface.exe";
        
        /// <summary>
        /// Type 'ss' in 'usernameField' text box
        /// </summary>
        public string UIUsernameFieldEditText = "ss";
        
        /// <summary>
        /// Type '{Tab}' in 'usernameField' text box
        /// </summary>
        public string UIUsernameFieldEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '********' in 'passwordField' text box
        /// </summary>
        public string UIPasswordFieldEditSendKeys = "A2RcPsxsl5ATiwB7aYvPzVij3YOpp1Qx";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Single_Plain_Item'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Single_Plain_ItemExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Test Item: Plain' label equals 'Test Item: Plain'
        /// </summary>
        public string UITestItemPlainTextDisplayText = "Test Item: Plain";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$10.00' label equals '$10.00'
        /// </summary>
        public string UIItem1000TextDisplayText = "$10.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$10.00' label equals '$10.00'
        /// </summary>
        public string UIItem1000TextDisplayText1 = "$10.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.00' label equals '$0.00'
        /// </summary>
        public string UIItem000TextDisplayText = "$0.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$10.00' label equals '$10.00'
        /// </summary>
        public string UIItem1000Text1DisplayText = "$10.00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assert_Multiple_Plain_Items'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Assert_Multiple_Plain_ItemsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Test Item: Plain' label equals 'Test Item: Plain'
        /// </summary>
        public string UITestItemPlainTextDisplayText = "Test Item: Plain";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$10.00' label equals '$10.00'
        /// </summary>
        public string UIItem1000TextDisplayText = "$10.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Test Item: Plain' label equals 'Test Item: Plain'
        /// </summary>
        public string UITestItemPlainTextDisplayText1 = "Test Item: Plain";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$10.00' label equals '$10.00'
        /// </summary>
        public string UIItem1000TextDisplayText1 = "$10.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Test Item: Plain' label equals 'Test Item: Plain'
        /// </summary>
        public string UITestItemPlainTextDisplayText2 = "Test Item: Plain";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$10.00' label equals '$10.00'
        /// </summary>
        public string UIItem1000TextDisplayText2 = "$10.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$10.00' label equals '$30.00'
        /// </summary>
        public string UIItem1000TextDisplayText3 = "$30.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.00' label equals '$0.00'
        /// </summary>
        public string UIItem000TextDisplayText = "$0.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$10.00' label equals '$30.00'
        /// </summary>
        public string UIItem1000Text1DisplayText = "$30.00";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIUsernameFieldEdit
        {
            get
            {
                if ((this.mUIUsernameFieldEdit == null))
                {
                    this.mUIUsernameFieldEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUsernameFieldEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "usernameField";
                    this.mUIUsernameFieldEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIUsernameFieldEdit;
            }
        }
        
        public WpfEdit UIPasswordFieldEdit
        {
            get
            {
                if ((this.mUIPasswordFieldEdit == null))
                {
                    this.mUIPasswordFieldEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIPasswordFieldEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "passwordField";
                    this.mUIPasswordFieldEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPasswordFieldEdit;
            }
        }
        
        public WpfButton UILogInButton
        {
            get
            {
                if ((this.mUILogInButton == null))
                {
                    this.mUILogInButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUILogInButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "New";
                    this.mUILogInButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUILogInButton;
            }
        }
        
        public WpfButton UIOptionsButtonButton
        {
            get
            {
                if ((this.mUIOptionsButtonButton == null))
                {
                    this.mUIOptionsButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIOptionsButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "OptionsButton";
                    this.mUIOptionsButtonButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIOptionsButtonButton;
            }
        }
        
        public UIMain_FramePane UIMain_FramePane
        {
            get
            {
                if ((this.mUIMain_FramePane == null))
                {
                    this.mUIMain_FramePane = new UIMain_FramePane(this);
                }
                return this.mUIMain_FramePane;
            }
        }
        
        public WpfEdit UIUPCFieldEdit
        {
            get
            {
                if ((this.mUIUPCFieldEdit == null))
                {
                    this.mUIUPCFieldEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUPCFieldEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UPCField";
                    this.mUIUPCFieldEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIUPCFieldEdit;
            }
        }
        
        public UIItemScrollPane UIItemScrollPane
        {
            get
            {
                if ((this.mUIItemScrollPane == null))
                {
                    this.mUIItemScrollPane = new UIItemScrollPane(this);
                }
                return this.mUIItemScrollPane;
            }
        }
        
        public WpfText UIItem1000Text
        {
            get
            {
                if ((this.mUIItem1000Text == null))
                {
                    this.mUIItem1000Text = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem1000Text.SearchProperties[WpfText.PropertyNames.AutomationId] = "CostTotal";
                    this.mUIItem1000Text.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem1000Text;
            }
        }
        
        public WpfText UIItem000Text
        {
            get
            {
                if ((this.mUIItem000Text == null))
                {
                    this.mUIItem000Text = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem000Text.SearchProperties[WpfText.PropertyNames.AutomationId] = "SavingsTotal";
                    this.mUIItem000Text.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem000Text;
            }
        }
        
        public WpfText UIItem1000Text1
        {
            get
            {
                if ((this.mUIItem1000Text1 == null))
                {
                    this.mUIItem1000Text1 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem1000Text1.SearchProperties[WpfText.PropertyNames.AutomationId] = "Total";
                    this.mUIItem1000Text1.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem1000Text1;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIUsernameFieldEdit;
        
        private WpfEdit mUIPasswordFieldEdit;
        
        private WpfButton mUILogInButton;
        
        private WpfButton mUIOptionsButtonButton;
        
        private UIMain_FramePane mUIMain_FramePane;
        
        private WpfEdit mUIUPCFieldEdit;
        
        private UIItemScrollPane mUIItemScrollPane;
        
        private WpfText mUIItem1000Text;
        
        private WpfText mUIItem000Text;
        
        private WpfText mUIItem1000Text1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMain_FramePane : WpfPane
    {
        
        public UIMain_FramePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.Frame";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "Main_Frame";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UILogoutButton
        {
            get
            {
                if ((this.mUILogoutButton == null))
                {
                    this.mUILogoutButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUILogoutButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Logout_Button";
                    this.mUILogoutButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUILogoutButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUILogoutButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemScrollPane : WpfPane
    {
        
        public UIItemScrollPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "ItemScroll";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfText UITestItemPlainText
        {
            get
            {
                if ((this.mUITestItemPlainText == null))
                {
                    this.mUITestItemPlainText = new WpfText(this);
                    #region Search Criteria
                    this.mUITestItemPlainText.SearchProperties[WpfText.PropertyNames.AutomationId] = "NameField";
                    this.mUITestItemPlainText.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITestItemPlainText;
            }
        }
        
        public WpfText UIItem1000Text
        {
            get
            {
                if ((this.mUIItem1000Text == null))
                {
                    this.mUIItem1000Text = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem1000Text.SearchProperties[WpfText.PropertyNames.AutomationId] = "AmountField";
                    this.mUIItem1000Text.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem1000Text;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUITestItemPlainText;
        
        private WpfText mUIItem1000Text;
        #endregion
    }
}
