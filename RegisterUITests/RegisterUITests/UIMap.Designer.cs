// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace RegisterUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Successfuly logs into the register UI and then logs out
        /// </summary>
        public void loginCorrectUserPass()
        {
            #region Variable Declarations
            WpfEdit uIUsernameFieldEdit = this.UIMainWindowWindow.UIUsernameFieldEdit;
            WinListItem uISnapRegisterSystemInListItem = this.UIItemWindow.UIFolderViewWindow.UISnapRegisterSystemInListItem;
            WpfEdit uIPasswordFieldEdit = this.UIMainWindowWindow.UIPasswordFieldEdit;
            WpfButton uIOptionsButtonButton = this.UIMainWindowWindow.UIOptionsButtonButton;
            WpfButton uILogoutButton = this.UIMainWindowWindow.UIMain_FramePane.UILogoutButton;
            #endregion

            // Launch 'D:\Documents\### School Work\### Current Term ###\JP\Crackle-Pop\Snap Register System Interface\Snap Register System Interface\bin\Debug\Snap Register System Interface.exe'
            ApplicationUnderTest uIMainWindowWindow = ApplicationUnderTest.Launch(this.loginCorrectUserPassParams.UIMainWindowWindowExePath, this.loginCorrectUserPassParams.UIMainWindowWindowAlternateExePath);

            // Click 'usernameField' text box
            Mouse.Click(uIUsernameFieldEdit, new Point(25, 8));

            // Type 'ss{Tab}' in 'Snap Register System Interface.exe - Shortcut' list item
            Keyboard.SendKeys(uISnapRegisterSystemInListItem, this.loginCorrectUserPassParams.UISnapRegisterSystemInListItemSendKeys, ModifierKeys.None);

            // Type '********' in 'passwordField' text box
            Keyboard.SendKeys(uIPasswordFieldEdit, this.loginCorrectUserPassParams.UIPasswordFieldEditSendKeys, true);

            // Click 'OptionsButton' button
            Mouse.Click(uIOptionsButtonButton, new Point(227, 392));

            // Click 'Logout' button
            Mouse.Click(uILogoutButton, new Point(190, 72));
        }
        
        /// <summary>
        /// log into the register for other tests.
        /// </summary>
        public void Login()
        {
            #region Variable Declarations
            WpfEdit uIUsernameFieldEdit = this.UIMainWindowWindow.UIUsernameFieldEdit;
            WpfEdit uIPasswordFieldEdit = this.UIMainWindowWindow.UIPasswordFieldEdit;
            WpfButton uILogInButton = this.UIMainWindowWindow.UILogInButton;
            #endregion

            // Launch 'D:\Documents\### School Work\### Current Term ###\JP\Crackle-Pop\Snap Register System Interface\Snap Register System Interface\bin\Debug\Snap Register System Interface.exe'
            ApplicationUnderTest uIMainWindowWindow = ApplicationUnderTest.Launch(this.LoginParams.UIMainWindowWindowExePath, this.LoginParams.UIMainWindowWindowAlternateExePath);

            // Type 'ss' in 'usernameField' text box
            uIUsernameFieldEdit.Text = this.LoginParams.UIUsernameFieldEditText;

            // Click 'passwordField' text box
            Mouse.Click(uIPasswordFieldEdit, new Point(39, 1));

            // Type '********' in 'passwordField' text box
            Keyboard.SendKeys(uIPasswordFieldEdit, this.LoginParams.UIPasswordFieldEditSendKeys, true);

            // Click 'Log In' button
            Mouse.Click(uILogInButton, new Point(50, 18));
        }
        
        /// <summary>
        /// Types the code '4011' into the barcode box and hits enter. This adds a banana to the sale.
        /// </summary>
        public void addItemWithUPCField()
        {
            #region Variable Declarations
            WpfEdit uIUPCFieldEdit = this.UIMainWindowWindow.UIUPCFieldEdit;
            #endregion

            // Type '4011' in 'UPCField' text box
            uIUPCFieldEdit.Text = this.addItemWithUPCFieldParams.UIUPCFieldEditText;

            // Type '{Enter}' in 'UPCField' text box
            Keyboard.SendKeys(uIUPCFieldEdit, this.addItemWithUPCFieldParams.UIUPCFieldEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Checks the totals box to see if the price of a single banana has been calculated correctly. This will only pass if a single banana is the only item in the sale.
        /// </summary>
        public void SingleItemTotalsCheck()
        {
            #region Variable Declarations
            WpfText uIItem099Text = this.UIMainWindowWindow.UIItemScrollPane.UIItem099Text;
            WpfText uIItem099Text1 = this.UIMainWindowWindow.UIItem099Text;
            WpfText uIItem000Text = this.UIMainWindowWindow.UIItem000Text;
            WpfText uIItem099Text11 = this.UIMainWindowWindow.UIItem099Text1;
            #endregion

            // Verify that the 'DisplayText' property of '$0.99' label equals '$0.99'
            Assert.AreEqual(this.SingleItemTotalsCheckExpectedValues.UIItem099TextDisplayText, uIItem099Text.DisplayText, "PriceString != \"$0.99\"");

            // Verify that the 'DisplayText' property of '$0.99' label equals '$0.99'
            Assert.AreEqual(this.SingleItemTotalsCheckExpectedValues.UIItem099TextDisplayText1, uIItem099Text1.DisplayText, "CostTotal != \"$0.99\"");

            // Verify that the 'DisplayText' property of '$0.00' label equals '$0.00'
            Assert.AreEqual(this.SingleItemTotalsCheckExpectedValues.UIItem000TextDisplayText, uIItem000Text.DisplayText, "SavingsTotal != \"$0.00\"");

            // Verify that the 'DisplayText' property of '$0.99' label equals '$0.99'
            Assert.AreEqual(this.SingleItemTotalsCheckExpectedValues.UIItem099Text1DisplayText, uIItem099Text11.DisplayText, "Total != \"$0.99\"");
        }
        
        /// <summary>
        /// Checks the name of the logged in user.
        /// </summary>
        public void CheckLoggedInUsername()
        {
            #region Variable Declarations
            WpfText uISkylerSwensonText = this.UIMainWindowWindow.UISkylerSwensonText;
            #endregion

            // Verify that the 'DisplayText' property of 'Skyler Swenson' label equals 'Skyler Swenson'
            Assert.AreEqual(this.CheckLoggedInUsernameExpectedValues.UISkylerSwensonTextDisplayText, uISkylerSwensonText.DisplayText, "Username != \"Skyler Swenson\"");
        }
        
        /// <summary>
        /// Adds a single tomato to the sale by entering it's barcode into the barcode box.
        /// </summary>
        public void addTomatoToSale()
        {
            #region Variable Declarations
            WpfEdit uIUPCFieldEdit = this.UIMainWindowWindow.UIUPCFieldEdit;
            #endregion

            // Type '4066' in 'UPCField' text box
            uIUPCFieldEdit.Text = this.addTomatoToSaleParams.UIUPCFieldEditText;

            // Type '{Enter}' in 'UPCField' text box
            Keyboard.SendKeys(uIUPCFieldEdit, this.addTomatoToSaleParams.UIUPCFieldEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// checks the math for multiple items to make sure they are added correctly.
        /// </summary>
        public void checkTotalsForMultipleItems()
        {
            #region Variable Declarations
            WpfText uIItem099Text = this.UIMainWindowWindow.UIItemScrollPane.UIItem099Text;
            WpfText uIItem099Text1 = this.UIMainWindowWindow.UIItem099Text;
            WpfText uIItem000Text = this.UIMainWindowWindow.UIItem000Text;
            WpfText uIItem099Text11 = this.UIMainWindowWindow.UIItem099Text1;
            #endregion

            // Verify that the 'DisplayText' property of '$0.99' label equals '$3.05'
            Assert.AreEqual(this.checkTotalsForMultipleItemsExpectedValues.UIItem099TextDisplayText, uIItem099Text.DisplayText, "TomatoPrice not 3.05");

            // Verify that the 'DisplayText' property of '$0.99' label equals '$0.99'
            Assert.AreEqual(this.checkTotalsForMultipleItemsExpectedValues.UIItem099TextDisplayText1, uIItem099Text.DisplayText, "Banana price not 0.99");

            // Verify that the 'DisplayText' property of '$0.99' label equals '$3.05'
            Assert.AreEqual(this.checkTotalsForMultipleItemsExpectedValues.UIItem099TextDisplayText2, uIItem099Text.DisplayText, "2nd tomato not 3.05");

            // Verify that the 'ControlType' property of '$0.99' label equals 'Text'
            Assert.AreEqual(this.checkTotalsForMultipleItemsExpectedValues.UIItem099TextControlType, uIItem099Text1.ControlType.ToString(), "Cost not 7.09");

            // Verify that the 'ControlType' property of '$0.00' label equals 'Text'
            Assert.AreEqual(this.checkTotalsForMultipleItemsExpectedValues.UIItem000TextControlType, uIItem000Text.ControlType.ToString(), "Savings not 0.00");

            // Verify that the 'DisplayText' property of '$0.99' label equals '$7.09'
            Assert.AreEqual(this.checkTotalsForMultipleItemsExpectedValues.UIItem099Text1DisplayText, uIItem099Text11.DisplayText, "Total not 7.09");
        }
        
        /// <summary>
        /// Adds a New Nintendo3ds to the transaction which has a sale that is automatically applied.
        /// </summary>
        public void addItemWithSale()
        {
            #region Variable Declarations
            WpfEdit uIUPCFieldEdit = this.UIMainWindowWindow.UIUPCFieldEdit;
            #endregion

            // Type 'qw405075375' in 'UPCField' text box
            uIUPCFieldEdit.Text = this.addItemWithSaleParams.UIUPCFieldEditText;

            // Type '{Enter}' in 'UPCField' text box
            Keyboard.SendKeys(uIUPCFieldEdit, this.addItemWithSaleParams.UIUPCFieldEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Checks the totals box for the correct amount when a single 3ds is in the transaction.
        /// </summary>
        public void CheckSaleTotalsAmount()
        {
            #region Variable Declarations
            WpfText uIItem099Text = this.UIMainWindowWindow.UIItemScrollPane.UIItem099Text;
            WpfText uIItem5000Text = this.UIMainWindowWindow.UICouponScrollPane.UIItem5000Text;
            WpfText uIItem099Text1 = this.UIMainWindowWindow.UIItem099Text;
            WpfText uIItem000Text = this.UIMainWindowWindow.UIItem000Text;
            WpfText uIItem099Text11 = this.UIMainWindowWindow.UIItem099Text1;
            #endregion

            // Verify that the 'DisplayText' property of '$0.99' label equals '$200.00'
            Assert.AreEqual(this.CheckSaleTotalsAmountExpectedValues.UIItem099TextDisplayText, uIItem099Text.DisplayText, "Cost is not 200");

            // Verify that the 'DisplayText' property of '$50.00' label equals '$50.00'
            Assert.AreEqual(this.CheckSaleTotalsAmountExpectedValues.UIItem5000TextDisplayText, uIItem5000Text.DisplayText, "Sale is not 50");

            // Verify that the 'DisplayText' property of '$0.99' label equals '$200.00'
            Assert.AreEqual(this.CheckSaleTotalsAmountExpectedValues.UIItem099TextDisplayText1, uIItem099Text1.DisplayText, "Total cost is not 200.00");

            // Verify that the 'DisplayText' property of '$0.00' label equals '$50.00'
            Assert.AreEqual(this.CheckSaleTotalsAmountExpectedValues.UIItem000TextDisplayText, uIItem000Text.DisplayText, "Total Savings is not 50.00");

            // Verify that the 'DisplayText' property of '$0.99' label equals '$150.00'
            Assert.AreEqual(this.CheckSaleTotalsAmountExpectedValues.UIItem099Text1DisplayText, uIItem099Text11.DisplayText, "The total is not 150.00");
        }
        
        /// <summary>
        /// Adds the coupon "$50.00 off 3ds" to the transaction.
        /// </summary>
        public void addCouponTo3ds()
        {
            #region Variable Declarations
            WpfEdit uIUPCFieldEdit = this.UIMainWindowWindow.UIUPCFieldEdit;
            #endregion

            // Type '25' in 'UPCField' text box
            uIUPCFieldEdit.Text = this.addCouponTo3dsParams.UIUPCFieldEditText;

            // Type '{Enter}' in 'UPCField' text box
            Keyboard.SendKeys(uIUPCFieldEdit, this.addCouponTo3dsParams.UIUPCFieldEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Checks to make sure all amounts are right if a 3ds is added and then a coupon is added for that item.
        /// </summary>
        public void checkTotalsForSingle3DSWithCoupon()
        {
            #region Variable Declarations
            WpfText uIItem099Text = this.UIMainWindowWindow.UIItemScrollPane.UIItem099Text;
            WpfText uIItem5000Text = this.UIMainWindowWindow.UICouponScrollPane.UIItem5000Text;
            WpfText uIItem099Text1 = this.UIMainWindowWindow.UIItem099Text;
            WpfText uIItem000Text = this.UIMainWindowWindow.UIItem000Text;
            WpfText uIItem099Text11 = this.UIMainWindowWindow.UIItem099Text1;
            #endregion

            // Verify that the 'DisplayText' property of '$0.99' label equals '$200.00'
            Assert.AreEqual(this.checkTotalsForSingle3DSWithCouponExpectedValues.UIItem099TextDisplayText, uIItem099Text.DisplayText, "Price of 3ds not 200.00");

            // Verify that the 'DisplayText' property of '$50.00' label equals '$50.00'
            Assert.AreEqual(this.checkTotalsForSingle3DSWithCouponExpectedValues.UIItem5000TextDisplayText, uIItem5000Text.DisplayText, "Sale not $50.00");

            // Verify that the 'DisplayText' property of '$50.00' label equals '$50.00'
            Assert.AreEqual(this.checkTotalsForSingle3DSWithCouponExpectedValues.UIItem5000TextDisplayText1, uIItem5000Text.DisplayText, "Coupon not $50.00");

            // Verify that the 'DisplayText' property of '$0.99' label equals '$200.00'
            Assert.AreEqual(this.checkTotalsForSingle3DSWithCouponExpectedValues.UIItem099TextDisplayText1, uIItem099Text1.DisplayText, "Total cost not $200.00");

            // Verify that the 'DisplayText' property of '$0.00' label equals '$100.00'
            Assert.AreEqual(this.checkTotalsForSingle3DSWithCouponExpectedValues.UIItem000TextDisplayText, uIItem000Text.DisplayText, "Total Savings not $100.00");

            // Verify that the 'DisplayText' property of '$0.99' label equals '$100.00'
            Assert.AreEqual(this.checkTotalsForSingle3DSWithCouponExpectedValues.UIItem099Text1DisplayText, uIItem099Text11.DisplayText, "Total not $100.00");
        }
        
        /// <summary>
        /// Removes the automatic sale from the 3ds at the top of the transaction.
        /// </summary>
        public void RemoveSale()
        {
            #region Variable Declarations
            WpfText uISale50ofanewdsxlText = this.UIMainWindowWindow.UICouponScrollPane.UISale50ofanewdsxlText;
            WpfButton uIRemoveDiscountButton = this.UIWpfWindow.UIItemCustom.UIRemoveDiscountButton;
            #endregion

            // Click 'Sale: $50 of a new ds xl' label
            Mouse.Click(uISale50ofanewdsxlText, new Point(121, 19));

            // Click 'Remove Discount' button
            Mouse.Click(uIRemoveDiscountButton, new Point(103, 36));
        }
        
        /// <summary>
        /// Checks the totals for a 3ds that has had it's automatic sale removed.
        /// </summary>
        public void checkTotalsRemoveSaleFrom3DS()
        {
            #region Variable Declarations
            WpfText uIItem099Text = this.UIMainWindowWindow.UIItemScrollPane.UIItem099Text;
            WpfText uIItem099Text1 = this.UIMainWindowWindow.UIItem099Text;
            WpfText uIItem000Text = this.UIMainWindowWindow.UIItem000Text;
            WpfText uIItem099Text11 = this.UIMainWindowWindow.UIItem099Text1;
            #endregion

            // Verify that the 'DisplayText' property of '$0.99' label equals '$200.00'
            Assert.AreEqual(this.checkTotalsRemoveSaleFrom3DSExpectedValues.UIItem099TextDisplayText, uIItem099Text.DisplayText, "3DS not priced at $200.00");

            // Verify that the 'DisplayText' property of '$0.99' label equals '$200.00'
            Assert.AreEqual(this.checkTotalsRemoveSaleFrom3DSExpectedValues.UIItem099TextDisplayText1, uIItem099Text1.DisplayText, "Total cost not $200.00");

            // Verify that the 'DisplayText' property of '$0.00' label equals '$0.00'
            Assert.AreEqual(this.checkTotalsRemoveSaleFrom3DSExpectedValues.UIItem000TextDisplayText, uIItem000Text.DisplayText, "Savings not $0.00");

            // Verify that the 'ControlType' property of '$0.99' label equals 'Text'
            Assert.AreEqual(this.checkTotalsRemoveSaleFrom3DSExpectedValues.UIItem099Text1ControlType, uIItem099Text11.ControlType.ToString(), "Total not $200.00");
        }
        
        /// <summary>
        /// Removes the coupon added to a 3ds.
        /// </summary>
        public void RemoveCouponFrom3DS()
        {
            #region Variable Declarations
            WpfText uISale50ofanewdsxlText = this.UIMainWindowWindow.UICouponScrollPane.UISale50ofanewdsxlText;
            WpfButton uIRemoveDiscountButton = this.UIWpfWindow.UIItemCustom.UIRemoveDiscountButton;
            #endregion

            // Click 'Sale: $50 of a new ds xl' label
            Mouse.Click(uISale50ofanewdsxlText, new Point(128, 13));

            // Click 'Remove Discount' button
            Mouse.Click(uIRemoveDiscountButton, new Point(115, 50));
        }
        
        /// <summary>
        /// Checks the totals after removing the coupon from a single 3DS to make sure all the math is correct.
        /// </summary>
        public void checkTotalsAfterRemovingCouponFrom3DSWithSale()
        {
            #region Variable Declarations
            WpfText uIItem099Text = this.UIMainWindowWindow.UIItemScrollPane.UIItem099Text;
            WpfText uIItem5000Text = this.UIMainWindowWindow.UICouponScrollPane.UIItem5000Text;
            WpfText uIItem099Text1 = this.UIMainWindowWindow.UIItem099Text;
            WpfText uIItem000Text = this.UIMainWindowWindow.UIItem000Text;
            WpfText uIItem099Text11 = this.UIMainWindowWindow.UIItem099Text1;
            #endregion

            // Verify that the 'DisplayText' property of '$0.99' label equals '$200.00'
            Assert.AreEqual(this.checkTotalsAfterRemovingCouponFrom3DSWithSaleExpectedValues.UIItem099TextDisplayText, uIItem099Text.DisplayText, "3DS price not $200.00");

            // Verify that the 'DisplayText' property of '$50.00' label equals '$50.00'
            Assert.AreEqual(this.checkTotalsAfterRemovingCouponFrom3DSWithSaleExpectedValues.UIItem5000TextDisplayText, uIItem5000Text.DisplayText, "Sale Not $50.00");

            // Verify that the 'DisplayText' property of '$0.99' label equals '$200.00'
            Assert.AreEqual(this.checkTotalsAfterRemovingCouponFrom3DSWithSaleExpectedValues.UIItem099TextDisplayText1, uIItem099Text1.DisplayText, "Cost not $200.00");

            // Verify that the 'DisplayText' property of '$0.00' label equals '$50.00'
            Assert.AreEqual(this.checkTotalsAfterRemovingCouponFrom3DSWithSaleExpectedValues.UIItem000TextDisplayText, uIItem000Text.DisplayText, "Savings not $50.00");

            // Verify that the 'DisplayText' property of '$0.99' label equals '$150.00'
            Assert.AreEqual(this.checkTotalsAfterRemovingCouponFrom3DSWithSaleExpectedValues.UIItem099Text1DisplayText, uIItem099Text11.DisplayText, "Total not $150.00");
        }
        
        #region Properties
        public virtual loginCorrectUserPassParams loginCorrectUserPassParams
        {
            get
            {
                if ((this.mloginCorrectUserPassParams == null))
                {
                    this.mloginCorrectUserPassParams = new loginCorrectUserPassParams();
                }
                return this.mloginCorrectUserPassParams;
            }
        }
        
        public virtual LoginParams LoginParams
        {
            get
            {
                if ((this.mLoginParams == null))
                {
                    this.mLoginParams = new LoginParams();
                }
                return this.mLoginParams;
            }
        }
        
        public virtual addItemWithUPCFieldParams addItemWithUPCFieldParams
        {
            get
            {
                if ((this.maddItemWithUPCFieldParams == null))
                {
                    this.maddItemWithUPCFieldParams = new addItemWithUPCFieldParams();
                }
                return this.maddItemWithUPCFieldParams;
            }
        }
        
        public virtual SingleItemTotalsCheckExpectedValues SingleItemTotalsCheckExpectedValues
        {
            get
            {
                if ((this.mSingleItemTotalsCheckExpectedValues == null))
                {
                    this.mSingleItemTotalsCheckExpectedValues = new SingleItemTotalsCheckExpectedValues();
                }
                return this.mSingleItemTotalsCheckExpectedValues;
            }
        }
        
        public virtual CheckLoggedInUsernameExpectedValues CheckLoggedInUsernameExpectedValues
        {
            get
            {
                if ((this.mCheckLoggedInUsernameExpectedValues == null))
                {
                    this.mCheckLoggedInUsernameExpectedValues = new CheckLoggedInUsernameExpectedValues();
                }
                return this.mCheckLoggedInUsernameExpectedValues;
            }
        }
        
        public virtual addTomatoToSaleParams addTomatoToSaleParams
        {
            get
            {
                if ((this.maddTomatoToSaleParams == null))
                {
                    this.maddTomatoToSaleParams = new addTomatoToSaleParams();
                }
                return this.maddTomatoToSaleParams;
            }
        }
        
        public virtual checkTotalsForMultipleItemsExpectedValues checkTotalsForMultipleItemsExpectedValues
        {
            get
            {
                if ((this.mcheckTotalsForMultipleItemsExpectedValues == null))
                {
                    this.mcheckTotalsForMultipleItemsExpectedValues = new checkTotalsForMultipleItemsExpectedValues();
                }
                return this.mcheckTotalsForMultipleItemsExpectedValues;
            }
        }
        
        public virtual addItemWithSaleParams addItemWithSaleParams
        {
            get
            {
                if ((this.maddItemWithSaleParams == null))
                {
                    this.maddItemWithSaleParams = new addItemWithSaleParams();
                }
                return this.maddItemWithSaleParams;
            }
        }
        
        public virtual CheckSaleTotalsAmountExpectedValues CheckSaleTotalsAmountExpectedValues
        {
            get
            {
                if ((this.mCheckSaleTotalsAmountExpectedValues == null))
                {
                    this.mCheckSaleTotalsAmountExpectedValues = new CheckSaleTotalsAmountExpectedValues();
                }
                return this.mCheckSaleTotalsAmountExpectedValues;
            }
        }
        
        public virtual addCouponTo3dsParams addCouponTo3dsParams
        {
            get
            {
                if ((this.maddCouponTo3dsParams == null))
                {
                    this.maddCouponTo3dsParams = new addCouponTo3dsParams();
                }
                return this.maddCouponTo3dsParams;
            }
        }
        
        public virtual checkTotalsForSingle3DSWithCouponExpectedValues checkTotalsForSingle3DSWithCouponExpectedValues
        {
            get
            {
                if ((this.mcheckTotalsForSingle3DSWithCouponExpectedValues == null))
                {
                    this.mcheckTotalsForSingle3DSWithCouponExpectedValues = new checkTotalsForSingle3DSWithCouponExpectedValues();
                }
                return this.mcheckTotalsForSingle3DSWithCouponExpectedValues;
            }
        }
        
        public virtual checkTotalsRemoveSaleFrom3DSExpectedValues checkTotalsRemoveSaleFrom3DSExpectedValues
        {
            get
            {
                if ((this.mcheckTotalsRemoveSaleFrom3DSExpectedValues == null))
                {
                    this.mcheckTotalsRemoveSaleFrom3DSExpectedValues = new checkTotalsRemoveSaleFrom3DSExpectedValues();
                }
                return this.mcheckTotalsRemoveSaleFrom3DSExpectedValues;
            }
        }
        
        public virtual checkTotalsAfterRemovingCouponFrom3DSWithSaleExpectedValues checkTotalsAfterRemovingCouponFrom3DSWithSaleExpectedValues
        {
            get
            {
                if ((this.mcheckTotalsAfterRemovingCouponFrom3DSWithSaleExpectedValues == null))
                {
                    this.mcheckTotalsAfterRemovingCouponFrom3DSWithSaleExpectedValues = new checkTotalsAfterRemovingCouponFrom3DSWithSaleExpectedValues();
                }
                return this.mcheckTotalsAfterRemovingCouponFrom3DSWithSaleExpectedValues;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIWpfWindow UIWpfWindow
        {
            get
            {
                if ((this.mUIWpfWindow == null))
                {
                    this.mUIWpfWindow = new UIWpfWindow();
                }
                return this.mUIWpfWindow;
            }
        }
        #endregion
        
        #region Fields
        private loginCorrectUserPassParams mloginCorrectUserPassParams;
        
        private LoginParams mLoginParams;
        
        private addItemWithUPCFieldParams maddItemWithUPCFieldParams;
        
        private SingleItemTotalsCheckExpectedValues mSingleItemTotalsCheckExpectedValues;
        
        private CheckLoggedInUsernameExpectedValues mCheckLoggedInUsernameExpectedValues;
        
        private addTomatoToSaleParams maddTomatoToSaleParams;
        
        private checkTotalsForMultipleItemsExpectedValues mcheckTotalsForMultipleItemsExpectedValues;
        
        private addItemWithSaleParams maddItemWithSaleParams;
        
        private CheckSaleTotalsAmountExpectedValues mCheckSaleTotalsAmountExpectedValues;
        
        private addCouponTo3dsParams maddCouponTo3dsParams;
        
        private checkTotalsForSingle3DSWithCouponExpectedValues mcheckTotalsForSingle3DSWithCouponExpectedValues;
        
        private checkTotalsRemoveSaleFrom3DSExpectedValues mcheckTotalsRemoveSaleFrom3DSExpectedValues;
        
        private checkTotalsAfterRemovingCouponFrom3DSWithSaleExpectedValues mcheckTotalsAfterRemovingCouponFrom3DSWithSaleExpectedValues;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIWpfWindow mUIWpfWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'loginCorrectUserPass'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class loginCorrectUserPassParams
    {
        
        #region Fields
        /// <summary>
        /// Launch 'D:\Documents\### School Work\### Current Term ###\JP\Crackle-Pop\Snap Register System Interface\Snap Register System Interface\bin\Debug\Snap Register System Interface.exe'
        /// </summary>
        public string UIMainWindowWindowExePath = "D:\\Documents\\### School Work\\### Current Term ###\\JP\\Crackle-Pop\\Snap Register Sy" +
            "stem Interface\\Snap Register System Interface\\bin\\Debug\\Snap Register System Int" +
            "erface.exe";
        
        /// <summary>
        /// Launch 'D:\Documents\### School Work\### Current Term ###\JP\Crackle-Pop\Snap Register System Interface\Snap Register System Interface\bin\Debug\Snap Register System Interface.exe'
        /// </summary>
        public string UIMainWindowWindowAlternateExePath = "D:\\Documents\\### School Work\\### Current Term ###\\JP\\Crackle-Pop\\Snap Register Sy" +
            "stem Interface\\Snap Register System Interface\\bin\\Debug\\Snap Register System Int" +
            "erface.exe";
        
        /// <summary>
        /// Type 'ss{Tab}' in 'Snap Register System Interface.exe - Shortcut' list item
        /// </summary>
        public string UISnapRegisterSystemInListItemSendKeys = "ss{Tab}";
        
        /// <summary>
        /// Type '********' in 'passwordField' text box
        /// </summary>
        public string UIPasswordFieldEditSendKeys = "x0qAXCJkAksV/5Z4rEZzrtBropebptsN";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Login'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class LoginParams
    {
        
        #region Fields
        /// <summary>
        /// Launch 'D:\Documents\### School Work\### Current Term ###\JP\Crackle-Pop\Snap Register System Interface\Snap Register System Interface\bin\Debug\Snap Register System Interface.exe'
        /// </summary>
        public string UIMainWindowWindowExePath = "D:\\Documents\\### School Work\\### Current Term ###\\JP\\Crackle-Pop\\Snap Register Sy" +
            "stem Interface\\Snap Register System Interface\\bin\\Debug\\Snap Register System Int" +
            "erface.exe";
        
        /// <summary>
        /// Launch 'D:\Documents\### School Work\### Current Term ###\JP\Crackle-Pop\Snap Register System Interface\Snap Register System Interface\bin\Debug\Snap Register System Interface.exe'
        /// </summary>
        public string UIMainWindowWindowAlternateExePath = "D:\\Documents\\### School Work\\### Current Term ###\\JP\\Crackle-Pop\\Snap Register Sy" +
            "stem Interface\\Snap Register System Interface\\bin\\Debug\\Snap Register System Int" +
            "erface.exe";
        
        /// <summary>
        /// Type 'ss' in 'usernameField' text box
        /// </summary>
        public string UIUsernameFieldEditText = "ss";
        
        /// <summary>
        /// Type '********' in 'passwordField' text box
        /// </summary>
        public string UIPasswordFieldEditSendKeys = "A2RcPsxsl5ATiwB7aYvPzVij3YOpp1Qx";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'addItemWithUPCField'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class addItemWithUPCFieldParams
    {
        
        #region Fields
        /// <summary>
        /// Type '4011' in 'UPCField' text box
        /// </summary>
        public string UIUPCFieldEditText = "4011";
        
        /// <summary>
        /// Type '{Enter}' in 'UPCField' text box
        /// </summary>
        public string UIUPCFieldEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SingleItemTotalsCheck'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SingleItemTotalsCheckExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.99' label equals '$0.99'
        /// </summary>
        public string UIItem099TextDisplayText = "$0.99";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.99' label equals '$0.99'
        /// </summary>
        public string UIItem099TextDisplayText1 = "$0.99";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.00' label equals '$0.00'
        /// </summary>
        public string UIItem000TextDisplayText = "$0.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.99' label equals '$0.99'
        /// </summary>
        public string UIItem099Text1DisplayText = "$0.99";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckLoggedInUsername'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckLoggedInUsernameExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Skyler Swenson' label equals 'Skyler Swenson'
        /// </summary>
        public string UISkylerSwensonTextDisplayText = "Skyler Swenson";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'addTomatoToSale'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class addTomatoToSaleParams
    {
        
        #region Fields
        /// <summary>
        /// Type '4066' in 'UPCField' text box
        /// </summary>
        public string UIUPCFieldEditText = "4066";
        
        /// <summary>
        /// Type '{Enter}' in 'UPCField' text box
        /// </summary>
        public string UIUPCFieldEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'checkTotalsForMultipleItems'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class checkTotalsForMultipleItemsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.99' label equals '$3.05'
        /// </summary>
        public string UIItem099TextDisplayText = "$3.05";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.99' label equals '$0.99'
        /// </summary>
        public string UIItem099TextDisplayText1 = "$0.99";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.99' label equals '$3.05'
        /// </summary>
        public string UIItem099TextDisplayText2 = "$3.05";
        
        /// <summary>
        /// Verify that the 'ControlType' property of '$0.99' label equals 'Text'
        /// </summary>
        public string UIItem099TextControlType = "Text";
        
        /// <summary>
        /// Verify that the 'ControlType' property of '$0.00' label equals 'Text'
        /// </summary>
        public string UIItem000TextControlType = "Text";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.99' label equals '$7.09'
        /// </summary>
        public string UIItem099Text1DisplayText = "$7.09";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'addItemWithSale'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class addItemWithSaleParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'qw405075375' in 'UPCField' text box
        /// </summary>
        public string UIUPCFieldEditText = "qw405075375";
        
        /// <summary>
        /// Type '{Enter}' in 'UPCField' text box
        /// </summary>
        public string UIUPCFieldEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckSaleTotalsAmount'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckSaleTotalsAmountExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.99' label equals '$200.00'
        /// </summary>
        public string UIItem099TextDisplayText = "$200.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$50.00' label equals '$50.00'
        /// </summary>
        public string UIItem5000TextDisplayText = "$50.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.99' label equals '$200.00'
        /// </summary>
        public string UIItem099TextDisplayText1 = "$200.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.00' label equals '$50.00'
        /// </summary>
        public string UIItem000TextDisplayText = "$50.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.99' label equals '$150.00'
        /// </summary>
        public string UIItem099Text1DisplayText = "$150.00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'addCouponTo3ds'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class addCouponTo3dsParams
    {
        
        #region Fields
        /// <summary>
        /// Type '25' in 'UPCField' text box
        /// </summary>
        public string UIUPCFieldEditText = "25";
        
        /// <summary>
        /// Type '{Enter}' in 'UPCField' text box
        /// </summary>
        public string UIUPCFieldEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'checkTotalsForSingle3DSWithCoupon'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class checkTotalsForSingle3DSWithCouponExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.99' label equals '$200.00'
        /// </summary>
        public string UIItem099TextDisplayText = "$200.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$50.00' label equals '$50.00'
        /// </summary>
        public string UIItem5000TextDisplayText = "$50.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$50.00' label equals '$50.00'
        /// </summary>
        public string UIItem5000TextDisplayText1 = "$50.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.99' label equals '$200.00'
        /// </summary>
        public string UIItem099TextDisplayText1 = "$200.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.00' label equals '$100.00'
        /// </summary>
        public string UIItem000TextDisplayText = "$100.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.99' label equals '$100.00'
        /// </summary>
        public string UIItem099Text1DisplayText = "$100.00";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'checkTotalsRemoveSaleFrom3DS'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class checkTotalsRemoveSaleFrom3DSExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.99' label equals '$200.00'
        /// </summary>
        public string UIItem099TextDisplayText = "$200.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.99' label equals '$200.00'
        /// </summary>
        public string UIItem099TextDisplayText1 = "$200.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.00' label equals '$0.00'
        /// </summary>
        public string UIItem000TextDisplayText = "$0.00";
        
        /// <summary>
        /// Verify that the 'ControlType' property of '$0.99' label equals 'Text'
        /// </summary>
        public string UIItem099Text1ControlType = "Text";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'checkTotalsAfterRemovingCouponFrom3DSWithSale'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class checkTotalsAfterRemovingCouponFrom3DSWithSaleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.99' label equals '$200.00'
        /// </summary>
        public string UIItem099TextDisplayText = "$200.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$50.00' label equals '$50.00'
        /// </summary>
        public string UIItem5000TextDisplayText = "$50.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.99' label equals '$200.00'
        /// </summary>
        public string UIItem099TextDisplayText1 = "$200.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.00' label equals '$50.00'
        /// </summary>
        public string UIItem000TextDisplayText = "$50.00";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '$0.99' label equals '$150.00'
        /// </summary>
        public string UIItem099Text1DisplayText = "$150.00";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIUsernameFieldEdit
        {
            get
            {
                if ((this.mUIUsernameFieldEdit == null))
                {
                    this.mUIUsernameFieldEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUsernameFieldEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "usernameField";
                    this.mUIUsernameFieldEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIUsernameFieldEdit;
            }
        }
        
        public WpfEdit UIPasswordFieldEdit
        {
            get
            {
                if ((this.mUIPasswordFieldEdit == null))
                {
                    this.mUIPasswordFieldEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIPasswordFieldEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "passwordField";
                    this.mUIPasswordFieldEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPasswordFieldEdit;
            }
        }
        
        public WpfButton UIOptionsButtonButton
        {
            get
            {
                if ((this.mUIOptionsButtonButton == null))
                {
                    this.mUIOptionsButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIOptionsButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "OptionsButton";
                    this.mUIOptionsButtonButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIOptionsButtonButton;
            }
        }
        
        public UIMain_FramePane UIMain_FramePane
        {
            get
            {
                if ((this.mUIMain_FramePane == null))
                {
                    this.mUIMain_FramePane = new UIMain_FramePane(this);
                }
                return this.mUIMain_FramePane;
            }
        }
        
        public WpfButton UILogInButton
        {
            get
            {
                if ((this.mUILogInButton == null))
                {
                    this.mUILogInButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUILogInButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "New";
                    this.mUILogInButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUILogInButton;
            }
        }
        
        public WpfEdit UIUPCFieldEdit
        {
            get
            {
                if ((this.mUIUPCFieldEdit == null))
                {
                    this.mUIUPCFieldEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUPCFieldEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "UPCField";
                    this.mUIUPCFieldEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIUPCFieldEdit;
            }
        }
        
        public UIItemScrollPane UIItemScrollPane
        {
            get
            {
                if ((this.mUIItemScrollPane == null))
                {
                    this.mUIItemScrollPane = new UIItemScrollPane(this);
                }
                return this.mUIItemScrollPane;
            }
        }
        
        public WpfText UIItem099Text
        {
            get
            {
                if ((this.mUIItem099Text == null))
                {
                    this.mUIItem099Text = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem099Text.SearchProperties[WpfText.PropertyNames.AutomationId] = "CostTotal";
                    this.mUIItem099Text.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem099Text;
            }
        }
        
        public WpfText UIItem000Text
        {
            get
            {
                if ((this.mUIItem000Text == null))
                {
                    this.mUIItem000Text = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem000Text.SearchProperties[WpfText.PropertyNames.AutomationId] = "SavingsTotal";
                    this.mUIItem000Text.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem000Text;
            }
        }
        
        public WpfText UIItem099Text1
        {
            get
            {
                if ((this.mUIItem099Text1 == null))
                {
                    this.mUIItem099Text1 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem099Text1.SearchProperties[WpfText.PropertyNames.AutomationId] = "Total";
                    this.mUIItem099Text1.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem099Text1;
            }
        }
        
        public WpfText UISkylerSwensonText
        {
            get
            {
                if ((this.mUISkylerSwensonText == null))
                {
                    this.mUISkylerSwensonText = new WpfText(this);
                    #region Search Criteria
                    this.mUISkylerSwensonText.SearchProperties[WpfText.PropertyNames.AutomationId] = "LoggedInAs";
                    this.mUISkylerSwensonText.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUISkylerSwensonText;
            }
        }
        
        public UICouponScrollPane UICouponScrollPane
        {
            get
            {
                if ((this.mUICouponScrollPane == null))
                {
                    this.mUICouponScrollPane = new UICouponScrollPane(this);
                }
                return this.mUICouponScrollPane;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIUsernameFieldEdit;
        
        private WpfEdit mUIPasswordFieldEdit;
        
        private WpfButton mUIOptionsButtonButton;
        
        private UIMain_FramePane mUIMain_FramePane;
        
        private WpfButton mUILogInButton;
        
        private WpfEdit mUIUPCFieldEdit;
        
        private UIItemScrollPane mUIItemScrollPane;
        
        private WpfText mUIItem099Text;
        
        private WpfText mUIItem000Text;
        
        private WpfText mUIItem099Text1;
        
        private WpfText mUISkylerSwensonText;
        
        private UICouponScrollPane mUICouponScrollPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMain_FramePane : WpfPane
    {
        
        public UIMain_FramePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.Frame";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "Main_Frame";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UILogoutButton
        {
            get
            {
                if ((this.mUILogoutButton == null))
                {
                    this.mUILogoutButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUILogoutButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Logout_Button";
                    this.mUILogoutButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUILogoutButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUILogoutButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemScrollPane : WpfPane
    {
        
        public UIItemScrollPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "ItemScroll";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfText UIItem099Text
        {
            get
            {
                if ((this.mUIItem099Text == null))
                {
                    this.mUIItem099Text = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem099Text.SearchProperties[WpfText.PropertyNames.AutomationId] = "AmountField";
                    this.mUIItem099Text.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem099Text;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIItem099Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICouponScrollPane : WpfPane
    {
        
        public UICouponScrollPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "CouponScroll";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfText UIItem5000Text
        {
            get
            {
                if ((this.mUIItem5000Text == null))
                {
                    this.mUIItem5000Text = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem5000Text.SearchProperties[WpfText.PropertyNames.AutomationId] = "AmountField";
                    this.mUIItem5000Text.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem5000Text;
            }
        }
        
        public WpfText UISale50ofanewdsxlText
        {
            get
            {
                if ((this.mUISale50ofanewdsxlText == null))
                {
                    this.mUISale50ofanewdsxlText = new WpfText(this);
                    #region Search Criteria
                    this.mUISale50ofanewdsxlText.SearchProperties[WpfText.PropertyNames.AutomationId] = "NameField";
                    this.mUISale50ofanewdsxlText.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUISale50ofanewdsxlText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIItem5000Text;
        
        private WpfText mUISale50ofanewdsxlText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIFolderViewWindow UIFolderViewWindow
        {
            get
            {
                if ((this.mUIFolderViewWindow == null))
                {
                    this.mUIFolderViewWindow = new UIFolderViewWindow(this);
                }
                return this.mUIFolderViewWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIFolderViewWindow mUIFolderViewWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFolderViewWindow : WinWindow
    {
        
        public UIFolderViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            #endregion
        }
        
        #region Properties
        public WinListItem UISnapRegisterSystemInListItem
        {
            get
            {
                if ((this.mUISnapRegisterSystemInListItem == null))
                {
                    this.mUISnapRegisterSystemInListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISnapRegisterSystemInListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Snap Register System Interface.exe - Shortcut";
                    #endregion
                }
                return this.mUISnapRegisterSystemInListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISnapRegisterSystemInListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWpfWindow : WpfWindow
    {
        
        public UIWpfWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom mUIItemCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom : WpfCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DiscountEditMenu";
            #endregion
        }
        
        #region Properties
        public WpfButton UIRemoveDiscountButton
        {
            get
            {
                if ((this.mUIRemoveDiscountButton == null))
                {
                    this.mUIRemoveDiscountButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIRemoveDiscountButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "RemoveDiscountButton";
                    #endregion
                }
                return this.mUIRemoveDiscountButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIRemoveDiscountButton;
        #endregion
    }
}
